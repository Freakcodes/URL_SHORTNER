import React, { useEffect,useState } from "react";
import { BarLoader } from "react-spinners";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Filter } from "lucide-react";
import { UrlState } from "@/context";
import { getClicksForUrls } from "../../db/apiClicks";
import { getUrls } from "../../db/apiUrls";
import useFetch from "@/hooks/useFetch";
import LinkCard from "@/components/LinkCard";
import CreateLink from "@/components/CreateLink";


const DashBoard = () => {
  // const [url,setUrl]=useState();
  const [searchQuery,setSearchQuery]=useState("");

 const {user}= UrlState()
  const {loading,error,data:urls,fn:fnUrls}=useFetch(getUrls,user?.id)
  
  const {loading:loadingCliks,error:loadingError,data:clicks,fn:fnClicks}=useFetch(getClicksForUrls,urls?.map((url)=>url.id));//we will be providing id of all the urls generated by the user...
  useEffect(()=>{
    fnUrls()
   console.log(filteredUrls);
  },[]);

  
  const filteredUrls = urls?.filter((url) =>
    url.title.toLowerCase().includes(searchQuery.toLowerCase())
  );
  
  useEffect(()=>{
    if(urls?.length) fnClicks();
   
   
      
  },[urls?.length]);
  
  
  return (
    <div className="flex flex-col gap-8">
      {(loading || loadingCliks) && <BarLoader width={"100%"} color="#36d7b7" />}
      <div className="grid grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Links Created</CardTitle>
          </CardHeader>
          <CardContent>
            <p>{urls?.length}</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Total CLicks</CardTitle>
          </CardHeader>
          <CardContent>
            <p>{clicks?.length?clicks?.length:0}</p>
          </CardContent>
        </Card>
      </div>
      <div className="flex justify-between">
        <h1 className="text-4xl font-extrabold">My Links</h1>
        <CreateLink/>
      </div>
      <div className="relative">
        <Input
        type="text"
        placeholder="Filter Links.."
        value={searchQuery}
        onChange={(e)=>setSearchQuery(e.target.value)}
        />
        <Filter className="absolute top-2 right-2 p-1"/>
      </div>
      {error && < Error message={error.message}/>}
      {
        (filteredUrls||[]).map((url,i)=>
          <LinkCard url={url} key={i} fetchUrls={fnUrls} />
        )
      }
    </div>
  );
};

export default DashBoard;
